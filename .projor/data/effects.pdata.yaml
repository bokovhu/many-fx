id: effects
name: Effects
description: The implemented audio effects
schema: s/Effect
objects:
  - name: multiply
    description: Multiplies the audio signal by a constant
    parameters:
      - name: scale
        description: The scale factor
        type: float
    impl: |
      #pragma omp parallel for
      for(unsigned int i = 0; i < audio_in->sample_count; i++) {
        audio_out->left_data[i] = audio_in->left_data[i] * params->scale;
        audio_out->right_data[i] = audio_in->right_data[i] * params->scale;
      }
  - name: white-noise
    description: Mixes the audio signal with a random white noise
    parameters:
      - name: mix
        description: The mix factor
        type: float
    impl: |
      #pragma omp parallel for
      for(unsigned int i = 0; i < audio_in->sample_count; i++) {
        audio_out->left_data[i] = audio_in->left_data[i] * (1.0 - params->mix) + (rand() / (float)RAND_MAX) * params->mix;
        audio_out->right_data[i] = audio_in->right_data[i] * (1.0 - params->mix) + (rand() / (float)RAND_MAX) * params->mix;
      }
  - name: sin
    description: Mixes the audio signal with a sine wave
    parameters:
      - name: freq
        description: The frequency of the sine wave
        type: float
      - name: amp
        description: The amplitude of the sine wave
        type: float
    impl: |
      float freq = params->freq;
      // Sample rate is constant 44.1 kHz
      #pragma omp parallel for
      for(unsigned int i = 0; i < audio_in->sample_count; i++) {
        audio_out->left_data[i] = audio_in->left_data[i] + params->amp * sinf(2.0 * 3.141592 * freq * i / 44100.0);
        audio_out->right_data[i] = audio_in->right_data[i] + params->amp * sinf(2.0 * 3.141592 * freq * i / 44100.0);
      }
  - name: simple-delay
    description: Adds a simple delay to the audio signal
    parameters:
      - name: delay
        description: The delay in seconds
        type: float
      - name: amp
        description: The amplitude of the delayed signal
        type: float
    impl: |
      // Sample rate is constant 44.1 kHz
      unsigned int delay = (unsigned int)(params->delay * 44100.0);
      #pragma omp parallel for
      for(unsigned int i = 0; i < audio_in->sample_count; i++) {
        if(i < delay) {
          audio_out->left_data[i] = audio_in->left_data[i];
          audio_out->right_data[i] = audio_in->right_data[i];
        } else {
          audio_out->left_data[i] = audio_in->left_data[i] + audio_in->left_data[i - delay] * params->amp;
          audio_out->right_data[i] = audio_in->right_data[i] + audio_in->right_data[i - delay] * params->amp;
        }
      }
  - name: tremolo
    description: Applies a tremolo effect (amplitude modulation)
    parameters:
      - name: freq
        description: The frequency of the tremolo
        type: float
      - name: depth
        description: The depth of the tremolo (0-1)
        type: float
    impl: |
      float freq = params->freq;
      // Sample rate is constant 44.1 kHz
      #pragma omp parallel for
      for(unsigned int i = 0; i < audio_in->sample_count; i++) {
        float mod = 1.0 - params->depth * (0.5 + 0.5 * sinf(2.0 * 3.141592 * freq * i / 44100.0));
        audio_out->left_data[i] = audio_in->left_data[i] * mod;
        audio_out->right_data[i] = audio_in->right_data[i] * mod;
      }
  - name: bitcrusher
    description: Reduces the bit depth of the audio signal
    parameters:
      - name: bits
        description: The number of bits to use (1-16)
        type: int
    impl: |
      float max_val = (1 << (params->bits - 1)) - 1;
      float scale = max_val;
      #pragma omp parallel for
      for(unsigned int i = 0; i < audio_in->sample_count; i++) {
        audio_out->left_data[i] = roundf(audio_in->left_data[i] * scale) / scale;
        audio_out->right_data[i] = roundf(audio_in->right_data[i] * scale) / scale;
      }
  - name: ring-modulator
    description: Applies ring modulation to the audio signal
    parameters:
      - name: freq
        description: The frequency of the carrier wave
        type: float
      - name: mix
        description: The mix factor (0-1)
        type: float
    impl: |
      float freq = params->freq;
      // Sample rate is constant 44.1 kHz
      #pragma omp parallel for
      for(unsigned int i = 0; i < audio_in->sample_count; i++) {
        float carrier = sinf(2.0 * 3.141592 * freq * i / 44100.0);
        audio_out->left_data[i] = audio_in->left_data[i] * (1.0 - params->mix) + 
                                 audio_in->left_data[i] * carrier * params->mix;
        audio_out->right_data[i] = audio_in->right_data[i] * (1.0 - params->mix) + 
                                  audio_in->right_data[i] * carrier * params->mix;
      }